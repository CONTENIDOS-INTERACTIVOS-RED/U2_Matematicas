{"remainingRequest":"/home/runner/work/U2_Matematicas/U2_Matematicas/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/U2_Matematicas/U2_Matematicas/src/views/curso/Tema3.vue?vue&type=template&id=0fb79b0f&lang=pug&","dependencies":[{"path":"/home/runner/work/U2_Matematicas/U2_Matematicas/src/views/curso/Tema3.vue","mtime":1751844855904},{"path":"/home/runner/work/U2_Matematicas/U2_Matematicas/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U2_Matematicas/U2_Matematicas/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/U2_Matematicas/U2_Matematicas/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/U2_Matematicas/U2_Matematicas/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U2_Matematicas/U2_Matematicas/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}